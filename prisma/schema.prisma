generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                  @id @default(autoincrement())
  email        String?
  name         String?
  username     String?              @unique
  password     String?
  profileImage String?
  createAt     DateTime             @default(now())
  role         Role                 @default(ANONIM)
  updateAt     DateTime             @updatedAt
  basket       Basket?
  reviews      Comment[]
  refrechToken RefrechToken[]
  favorites    UserFavoriteProduct?
}

model RefrechToken {
  id       Int      @id @default(autoincrement())
  token    String   @unique
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  userId   Int
  user     User     @relation(fields: [userId], references: [id])
}

model ProductCard {
  id             Int                       @id @default(autoincrement())
  name           String
  art            String
  price          Float
  itemArt        String
  itemMod        String
  quantity       Int                       @default(0)
  description    String                    @default("")
  createAt       DateTime                  @default(now())
  updateAt       DateTime                  @updatedAt
  discount       Int                       @default(0)
  views          Int                       @default(0)
  basket         BasketItem[]
  characteristic Characteristic[]
  reviews        Comment[]
  image          Image[]
  favorite       UserFavoriteProductItem[]
  attribute      Attribute[]               @relation("AttributeToProductCard")
}

model Attribute {
  id       Int           @id @default(autoincrement())
  value    String        @default("")
  name     String        @default("")
  type     AttributeType @default(OTHER)
  item     ProductCard[] @relation("AttributeToProductCard")
  children Attribute[]   @relation("ParentChildren")
  parent   Attribute[]   @relation("ParentChildren")
}

model Image {
  id            Int         @id @default(autoincrement())
  link          String
  productCardId Int
  main          Boolean     @default(false)
  product       ProductCard @relation(fields: [productCardId], references: [id])
}

model Comment {
  id          Int         @id @default(autoincrement())
  cardId      Int
  ranting     Int?
  text        String?
  userId      Int
  createAt    DateTime    @default(now())
  updateAt    DateTime    @updatedAt
  ProductCard ProductCard @relation(fields: [cardId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}

model Characteristic {
  id            Int                  @id @default(autoincrement())
  title         String
  productCardId Int
  ProductCard   ProductCard          @relation(fields: [productCardId], references: [id])
  content       CharacteristicItem[]
}

model CharacteristicItem {
  name             String
  value            String
  characteristicId Int
  id               Int            @id @default(autoincrement())
  Characteristic   Characteristic @relation(fields: [characteristicId], references: [id])
}

model Basket {
  id       Int          @id @default(autoincrement())
  createAt DateTime     @default(now())
  updateAt DateTime     @updatedAt
  userId   Int?         @unique
  user     User?        @relation(fields: [userId], references: [id])
  item     BasketItem[]
}

model BasketItem {
  id       Int         @id @default(autoincrement())
  createAt DateTime    @default(now())
  updateAt DateTime    @updatedAt
  count    Int         @default(1)
  cardId   Int
  basketId Int
  basket   Basket      @relation(fields: [basketId], references: [id])
  card     ProductCard @relation(fields: [cardId], references: [id])
}

model UserFavoriteProduct {
  id       Int                       @id @default(autoincrement())
  createAt DateTime                  @default(now())
  updateAt DateTime                  @updatedAt
  userId   Int?                      @unique
  user     User?                     @relation(fields: [userId], references: [id])
  item     UserFavoriteProductItem[]
}

model UserFavoriteProductItem {
  id         Int                 @id @default(autoincrement())
  createAt   DateTime            @default(now())
  updateAt   DateTime            @updatedAt
  cardId     Int
  favoriteId Int
  card       ProductCard         @relation(fields: [cardId], references: [id])
  favorite   UserFavoriteProduct @relation(fields: [favoriteId], references: [id])
}

model MainSlider {
  id       Int              @id(map: "MainSlader_pkey") @default(autoincrement())
  createAt DateTime         @default(now())
  updateAt DateTime         @updatedAt
  item     MainSliderItem[]
}

model MainSliderItem {
  id        Int        @id(map: "MainSladerItem_pkey") @default(autoincrement())
  createAt  DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  mainPhoto String?    @default("")
  main1024  String?
  main768   String?
  main600   String?
  parentId  Int
  parent    MainSlider @relation(fields: [parentId], references: [id], map: "MainSladerItem_parentId_fkey")
}

enum Role {
  ANONIM
  USER
  ADMIN
}

enum AttributeType {
  CATEGOR
  MAKER
  OTHER
  SUBCATEGOR
  CLASS
}
